// Generated by gencpp from file ur5_pkg/ForwardKinematicRequest.msg
// DO NOT EDIT!


#ifndef UR5_PKG_MESSAGE_FORWARDKINEMATICREQUEST_H
#define UR5_PKG_MESSAGE_FORWARDKINEMATICREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur5_pkg
{
template <class ContainerAllocator>
struct ForwardKinematicRequest_
{
  typedef ForwardKinematicRequest_<ContainerAllocator> Type;

  ForwardKinematicRequest_()
    : theta0(0.0)
    , theta1(0.0)
    , theta2(0.0)
    , theta3(0.0)
    , theta4(0.0)
    , theta5(0.0)  {
    }
  ForwardKinematicRequest_(const ContainerAllocator& _alloc)
    : theta0(0.0)
    , theta1(0.0)
    , theta2(0.0)
    , theta3(0.0)
    , theta4(0.0)
    , theta5(0.0)  {
  (void)_alloc;
    }



   typedef double _theta0_type;
  _theta0_type theta0;

   typedef double _theta1_type;
  _theta1_type theta1;

   typedef double _theta2_type;
  _theta2_type theta2;

   typedef double _theta3_type;
  _theta3_type theta3;

   typedef double _theta4_type;
  _theta4_type theta4;

   typedef double _theta5_type;
  _theta5_type theta5;





  typedef boost::shared_ptr< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ForwardKinematicRequest_

typedef ::ur5_pkg::ForwardKinematicRequest_<std::allocator<void> > ForwardKinematicRequest;

typedef boost::shared_ptr< ::ur5_pkg::ForwardKinematicRequest > ForwardKinematicRequestPtr;
typedef boost::shared_ptr< ::ur5_pkg::ForwardKinematicRequest const> ForwardKinematicRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator1> & lhs, const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator2> & rhs)
{
  return lhs.theta0 == rhs.theta0 &&
    lhs.theta1 == rhs.theta1 &&
    lhs.theta2 == rhs.theta2 &&
    lhs.theta3 == rhs.theta3 &&
    lhs.theta4 == rhs.theta4 &&
    lhs.theta5 == rhs.theta5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator1> & lhs, const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur5_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06829cf9941b7416f2e021ddaa9f0142";
  }

  static const char* value(const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06829cf9941b7416ULL;
  static const uint64_t static_value2 = 0xf2e021ddaa9f0142ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur5_pkg/ForwardKinematicRequest";
  }

  static const char* value(const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta0\n"
"float64 theta1\n"
"float64 theta2\n"
"float64 theta3\n"
"float64 theta4\n"
"float64 theta5\n"
;
  }

  static const char* value(const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta0);
      stream.next(m.theta1);
      stream.next(m.theta2);
      stream.next(m.theta3);
      stream.next(m.theta4);
      stream.next(m.theta5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ForwardKinematicRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur5_pkg::ForwardKinematicRequest_<ContainerAllocator>& v)
  {
    s << indent << "theta0: ";
    Printer<double>::stream(s, indent + "  ", v.theta0);
    s << indent << "theta1: ";
    Printer<double>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<double>::stream(s, indent + "  ", v.theta2);
    s << indent << "theta3: ";
    Printer<double>::stream(s, indent + "  ", v.theta3);
    s << indent << "theta4: ";
    Printer<double>::stream(s, indent + "  ", v.theta4);
    s << indent << "theta5: ";
    Printer<double>::stream(s, indent + "  ", v.theta5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR5_PKG_MESSAGE_FORWARDKINEMATICREQUEST_H
